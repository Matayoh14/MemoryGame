//
// Memgame.java
// Implements the class which generates and handles the memory game.
//
package memgame;

import java.awt.GridLayout;
import java.awt.Image;
import java.io.IOException;
import java.util.Random;
import javax.imageio.ImageIO;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

// Main memory game class
public class MemGame extends JFrame {

    /**
     * Creates new form MemGameJFrame
     */
    public MemGame() {
        initComponents();

        // Use grid layout for cards
        GridLayout card_Layout = new GridLayout(GRIDHEIGHT, GRIDWIDTH);
        jPanel1.setLayout(card_Layout);

        card_Layout.setHgap(10);
        card_Layout.setVgap(10);

        rand = new Random();

        if (CARDS > IMAGES) {
            JOptionPane.showMessageDialog(null, "Not enough images for layout", "Error",
                    JOptionPane.ERROR_MESSAGE);
            dispose();
            System.exit(0);
        }

        // Select the cards and positions
        Create();
    }

    // Create the memory game by selecting and ordering cards
    public final void Create() {

        int card_order[] = GenerateOrder(CARDS);
        int imagesIds[] = GenerateOrder(IMAGES);

        LoadImages();

        //  Add the cards to the panel
        for (int i = 0; i < CARDS; i++) {
            int image = imagesIds[card_order[i] / 2];
            CardPanel panel = new CardPanel(this, images[image]);
            jPanel1.add(panel);
        }

        select1 = null;
        attempts = 0;
        matched = 0;

        // We are ready to layout the panel
        pack();
    }

    // Load the images from resources
    private void LoadImages() {
        images = new Image[IMAGES];
        try {
            for (int i = 0; i < IMAGES; i++) {

                String name = "images/s" + Integer.toString(i + 1) + ".png";
                images[i] = ImageIO.read(ClassLoader.getSystemResource(name));
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Failed to load image", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }

    // randomly order the cards
    private int[] GenerateOrder(int size) {
        int[] order = new int[size];

        for (int i = 0; i < size; i++) {
            order[i] = i;
        }

        for (int j = size; j > 0; j--) {
            int swap = rand.nextInt(j);
            int tmp = order[j - 1];
            order[j - 1] = order[swap];
            order[swap] = tmp;
        }
        return (order);
    }

    // handle the user selecting a card
    public void select(CardPanel selected) {
        // If the first card just note the selection, the panel will highlight
        if (select1 == null) {
            select1 = selected;
        } else if (selected != select1) {  // If second card, check match
            boolean match = select1.getImage() == selected.getImage();
            select1.setDisplay(match);
            selected.setDisplay(match);

            select1 = null;
            attempts++;

            // If they match check to see if we have completed the matching
            if (match) {
                matched += 2;

                if (matched == CARDS) {
                    JOptionPane.showMessageDialog(null, "Completed in "
                            + Integer.toString(attempts) + " Attempts", "Winner",
                            JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        NewBtn = new java.awt.Button();
        label1 = new java.awt.Label();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 485, Short.MAX_VALUE)
        );

        NewBtn.setActionCommand("");
        NewBtn.setLabel("New");
        NewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NewBtnActionPerformed(evt);
            }
        });

        label1.setText("Click 2 cards to see if they match, match all cards in as few tries as possible.");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 392, Short.MAX_VALUE)
                .addComponent(NewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(NewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(label1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        label1.getAccessibleContext().setAccessibleName("Instructions");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Handle the user pressing the New button
    private void NewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NewBtnActionPerformed
        // If in the middle of a game warn of progress lost
        if (matched > 0 && matched < CARDS) {
            if (JOptionPane.showConfirmDialog(this, "Are you sure you want to lose your progress?",
                    "Confirm", JOptionPane.OK_CANCEL_OPTION)
                    == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }

        // Recreate the layout
        jPanel1.removeAll();
        Create();
        pack();
        invalidate();

    }//GEN-LAST:event_NewBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MemGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MemGame().setVisible(true);
            }
        });
    }

    private final Random rand;      // Random number generator
    private Image[] images;         // array of images
    private CardPanel select1;      // first selected card
    private int matched;            // number of cards matched
    private int attempts;           // number of pairs tried
    
    private final int GRIDWIDTH = 8;
    private final int GRIDHEIGHT = 4;
    private final int CARDS = GRIDWIDTH * GRIDHEIGHT;
    private final int IMAGES = 32;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button NewBtn;
    private javax.swing.JPanel jPanel1;
    private java.awt.Label label1;
    // End of variables declaration//GEN-END:variables
}

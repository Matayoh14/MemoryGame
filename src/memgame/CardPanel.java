//
// CardPanel.java
// Implements a selectable card in the memory game.
//
package memgame;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.util.logging.Level;
import java.util.logging.Logger;

// Main card panel class
public class CardPanel extends javax.swing.JPanel implements MouseListener {

    // Constructor
    public CardPanel(MemGame p, Image im) {
        initComponents();

        addMouseListener(this);

        display = false;
        found = false;
        percent = 0;

        parent = p;
        image = im;
    }

    // Returns the image object, used to deter if this matches another card
    public Image getImage() {
        return (image);
    }

    // Change the display of a card
    public void setDisplay(boolean keep) {
        found = keep;
        highlight = false;
        invalidate();
        repaint();
        
        // Start a timer to flip show the card
        Thread thread = new Thread() {
            @Override
            public void run() {
                try {
                    display = true;

                    for (int i = 1; i <= 10; i++) {
                        percent = i * 10;
                        Thread.sleep(60);
                        invalidate();
                        repaint();
                    }

                    // If the card is not a match flip it back
                    if (!keep) {

                        Thread.sleep(1000);

                        for (int i = 10; i > 0; i--) {
                            percent = i * 10;
                            Thread.sleep(60);
                            invalidate();
                            repaint();
                        }
                        display = false;
                        invalidate();
                        repaint();
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(CardPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        };
        thread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 125, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Draw the card
    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        Rectangle r = g.getClipBounds();

        // set the background colour
        g.setColor(highlight ? SELECTED : Color.BLUE);
        g.fillRect(r.x, r.y, r.width, r.height);

        // Display the image
        if (display) {
            int w = (r.width * percent) / 100;
            int x = (r.x + (r.width - w) / 2);

            g.drawImage(image, x, r.y, w, r.height, parent);
        }
    }

    private final MemGame parent;  // parent window to notify on selection
    private final Image image;     // image to display
    private boolean display;       // whether to display the image
    private boolean found;         // whether this card has been matched
    private boolean highlight = false;
    private int percent;
    
    // Highlight colour
    private final static Color SELECTED = new Color(0, 0, 128);

    // Handle mouse events
    @Override
    public void mouseClicked(MouseEvent e) {

        // select image if not already matched
        if (!found) {
            highlight = true;
            parent.select(this);
            repaint();
        }

    }

    @Override
    public void mousePressed(MouseEvent e) {
    }

    @Override
    public void mouseReleased(MouseEvent e) {
    }

    @Override
    public void mouseEntered(MouseEvent e) {
    }

    @Override
    public void mouseExited(MouseEvent e) {
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
